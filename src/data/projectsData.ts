export interface Project {
  slug: string; // unique, url-friendly identifier
  name: string;
  type: string; // e.g. 'Software', 'Consulting', etc.
  description: string;
  logo: string;
  image?: string;
  details: string;
  technologies?: string[];
  tag?: string;
  links?: { label: string; url: string }[];
  quote: string;
  quoteCite: string;
  challenges: string,
  challengesImage: string,
  solutions: string,
  solutionsImage: string,
  userFlow: string,
  userFlowImage: string,
  wireFraming: string,
  wireFramingImage: string,
  storyMapping: string,
  storyMappingImage: string,
  development: string,
  developmentImage: string,
  architecture: string,
  architectureImage: string,
  testing: string,
  testingImage: string,
  deployment: string,
  deploymentImage: string,
}

export const projectsData: Project[] = [
  {
    slug: "abia-state-homeland-security",
    name: "Abia State Homeland Security's Incident Command System",
    type: "Software Development",
    description: "Developed an incident command software solution to enable the Abia State Homeland Security, Fire, and Emergency Services to respond faster and smarter to emergencies and security reports. The platform allowed personnel to log incidents, record emergency calls, and transcribe them into structured digital records, ensuring accountability and efficiency across the state.",
    image: "https://images.unsplash.com/photo-1556742049-0cfed4f6a45d?w=800&h=450&fit=crop",
    logo: "/abia_logo.jpeg",
    details: "This project focused on digitizing the emergency response process for Abia State Homeland Security. We built a unified incident command system that streamlined how field officers, dispatchers, and command units communicate. Key features included live report logging, transcription of emergency calls, role-based access for different departments, and automated analytics dashboards for decision-makers. The system reduced manual paperwork, improved response coordination, and strengthened trust in emergency services by creating a transparent record of reports and responses.",
    technologies: ["React", "Node.js", "PostgreSQL", "Redis", "AWS GovCloud", "Twilio API", "Elasticsearch"],
    tag: "Featured",
    links: [
      { "label": "Case Study", "url": "https://casestudy.example.com/abia-homeland-security" }
    ],
    quote: "This project was more than just building software; it was about creating trust in public institutions by ensuring every emergency call leaves a digital footprint.",
    quoteCite: "Lead Software Architect",
    challenges: "We had to design a system that was both highly secure and extremely reliable, operating in environments where internet connectivity is inconsistent. Another challenge was ensuring the platform could integrate voice call transcription in real-time while maintaining data integrity and confidentiality.",
    challengesImage: "https://images.unsplash.com/photo-1551434678-e076c223a692?w=600&h=400&fit=crop",
    solutions: "Our team implemented a resilient cloud-native architecture with offline-first capabilities. We integrated Twilio for call management and transcription, optimized data pipelines for real-time syncing, and enforced strict role-based security measures to protect sensitive information. The final solution ensured field agents could log reports on mobile devices while headquarters had instant oversight.",
    solutionsImage: "https://images.unsplash.com/photo-1460925895917-afdab827c52f?w=600&h=400&fit=crop",
    userFlow: "The user journey was carefully designed: emergency calls are first received by dispatchers, logged into the system, transcribed, and assigned to the right response unit. Supervisors can monitor activities in real-time, while the public safety commissioner gets access to high-level analytics for policy-making.",
    userFlowImage: "https://images.unsplash.com/photo-1559136555-9303baea8ebd?w=600&h=300&fit=crop",
    wireFraming: "We created low-fidelity wireframes to validate workflows with Homeland Security officers before moving into design. This iterative process ensured the system reflected real-world emergency procedures.",
    wireFramingImage: "https://images.unsplash.com/photo-1581291518857-4e27b48ff24e?w=600&h=400&fit=crop",
    storyMapping: "Through story mapping, we prioritized core features like incident logging, call transcription, and supervisor dashboards before layering advanced analytics and integrations. This kept the project aligned with immediate mission-critical needs while leaving room for future expansion.",
    storyMappingImage: "https://images.unsplash.com/photo-1552664730-d307ca884978?w=600&h=300&fit=crop",
    development: "The system was built with modular microservices, ensuring each component — from call handling to analytics — could scale independently. This flexibility prepared the platform to support future integrations, such as GIS mapping and predictive emergency response tools.",
    developmentImage: "https://images.unsplash.com/photo-1558494949-ef010cbdcc31?w=600&h=300&fit=crop",
    architecture: "We designed a hybrid cloud architecture leveraging AWS GovCloud for secure storage, Redis for caching emergency data, and PostgreSQL for relational records. The architecture emphasized resilience, data encryption, and redundancy, ensuring 24/7 uptime.",
    architectureImage: "https://images.unsplash.com/photo-1605902711622-cfb43c4437b5?w=600&h=400&fit=crop",
    testing: "Our QA process simulated real-world emergencies by stress-testing call volumes, simulating partial outages, and conducting security penetration tests. We worked closely with field officers to validate usability and responsiveness in live drills.",
    testingImage: "https://images.unsplash.com/photo-1581091870627-3b4f5b5972d8?w=600&h=400&fit=crop",
    deployment: "The solution was deployed in a phased rollout across multiple emergency units, starting with pilot groups in Umuahia before scaling to the rest of the state. We provided training workshops and 24/7 technical support during the transition.",
    deploymentImage: "https://images.unsplash.com/photo-1504384308090-c894fdcc538d?w=600&h=400&fit=crop"
  },
  {
    slug: "abia-state-homeland-call-center",
    name: "Abia State Homeland Security's Call Center",
    type: "Software Development",
    description: "Set up a state-of-the-art call center system to enable Homeland Security personnel to efficiently receive and route emergency calls from citizens across Abia State.",
    image: "https://images.unsplash.com/photo-1556742049-0cfed4f6a45d?w=800&h=450&fit=crop",
    logo: "/abia_logo.jpeg",
    details: "The Abia State Homeland Security Call Center project established a central hub for emergency response communication. The system unified telephone hotlines, integrated digital call logging, and introduced real-time dashboards for monitoring call volumes and dispatch efficiency. By digitizing call handling, the project reduced missed calls, improved coordination between dispatchers and field units, and created a reliable audit trail of citizen reports.",
    technologies: ["React", "Node.js", "PostgreSQL", "Redis", "AWS GovCloud", "Twilio API", "WebRTC"],
    tag: "Featured",
    links: [
      { "label": "Case Study", "url": "https://casestudy.example.com/abia-homeland-call-center" }
    ],
    quote: "The Call Center was the beating heart of Abia’s new emergency response system. It ensured no cry for help went unheard.",
    quoteCite: "Project Manager",
    challenges: "Building a call center for a state-wide security agency meant designing for scale and resilience. The challenge lay in managing high call volumes during crisis events, ensuring 24/7 uptime, and integrating seamlessly with both legacy radio systems and modern digital platforms.",
    challengesImage: "https://images.unsplash.com/photo-1551434678-e076c223a692?w=600&h=400&fit=crop",
    solutions: "We built a robust call-handling system powered by Twilio and WebRTC for reliable voice connections. Automated call distribution ensured dispatchers could handle spikes in volume, while every call was logged, timestamped, and tagged for quick retrieval. We also introduced multilingual support and failover routing to guarantee that calls were never dropped, even during outages.",
    solutionsImage: "https://images.unsplash.com/photo-1460925895917-afdab827c52f?w=600&h=400&fit=crop",
    userFlow: "Citizens dial a dedicated emergency hotline. Calls are automatically routed to the next available dispatcher, logged into the system, and tagged with caller ID and location. Dispatchers then assign cases to field units while supervisors monitor response times on live dashboards.",
    userFlowImage: "https://images.unsplash.com/photo-1559136555-9303baea8ebd?w=600&h=300&fit=crop",
    wireFraming: "We designed wireframes focused on call handling efficiency: minimal-click workflows for dispatchers, clear priority indicators, and real-time status updates. Early prototypes were tested with Homeland Security officers before moving into development.",
    wireFramingImage: "https://images.unsplash.com/photo-1581291518857-4e27b48ff24e?w=600&h=400&fit=crop",
    storyMapping: "Through story mapping, we prioritized must-have features like automatic call logging, call queue management, and supervisor dashboards. Advanced analytics and transcription services were added as future iterations.",
    storyMappingImage: "https://images.unsplash.com/photo-1552664730-d307ca884978?w=600&h=300&fit=crop",
    development: "The call center system was built as a modular platform, allowing easy scaling across multiple lines and teams. We designed dispatcher dashboards with real-time updates, integrated analytics for peak-hour forecasting, and optimized backend APIs for quick routing.",
    developmentImage: "https://images.unsplash.com/photo-1558494949-ef010cbdcc31?w=600&h=300&fit=crop",
    architecture: "The solution used a hybrid cloud architecture. Voice handling was powered by Twilio and WebRTC, while PostgreSQL and Redis ensured fast and reliable call data storage. AWS GovCloud provided secure hosting, redundancy, and compliance with government security requirements.",
    architectureImage: "https://images.unsplash.com/photo-1605902711622-cfb43c4437b5?w=600&h=400&fit=crop",
    testing: "We ran stress tests simulating hundreds of concurrent calls to validate scalability. Security penetration testing ensured call data remained confidential. Field drills were conducted with actual dispatchers to refine workflows.",
    testingImage: "https://images.unsplash.com/photo-1581091870627-3b4f5b5972d8?w=600&h=400&fit=crop",
    deployment: "The call center system was first deployed in Umuahia with 20 dispatcher stations before rolling out state-wide. We conducted on-site training, created user manuals, and set up monitoring tools to track performance and uptime.",
    deploymentImage: "https://images.unsplash.com/photo-1504384308090-c894fdcc538d?w=600&h=400&fit=crop"
  },
  {
    slug: "swifftra",
    name: "SWIFFTRA Limited",
    type: "Mobile App",
    description: "A cross-platform transportation app built with Flutter and Firebase, designed to connect drivers and passengers with real-time tracking and seamless navigation.",
    image: "https://images.unsplash.com/photo-1506619216599-9d16d0903dfd?w=800&h=450&fit=crop",
    logo: "/projects/swif.png",
    details: "Developed a cross-platform transportation solution serving both Android and iOS users. Integrated Firebase authentication, real-time database, and geolocation services to provide smooth ridesharing experiences.",
    technologies: ["Flutter", "Firebase", "Google Maps API"],
    tag: "Mobile",
    links: [],
    quote: "Swifftra gave both drivers and passengers a reliable, user-friendly transportation solution.",
    quoteCite: "Lead Engineer",
    challenges: "Ensuring real-time synchronization between drivers and passengers while maintaining low latency across platforms.",
    challengesImage: "https://images.unsplash.com/photo-1536859355448-76f92ebdc33d?w=600&h=400&fit=crop",
    solutions: "Implemented Firebase real-time database with efficient query patterns, integrated Google Maps APIs, and designed optimized navigation flows for minimal friction.",
    solutionsImage: "https://images.unsplash.com/photo-1498050108023-c5249f4df085?w=600&h=400&fit=crop",
    userFlow: "Users sign up via Firebase authentication, drivers go online, and passengers request rides. Requests are matched, tracked in real time via geolocation, and logged in the Firebase database.",
    userFlowImage: "https://images.unsplash.com/photo-1559136555-9303baea8ebd?w=600&h=300&fit=crop",
    wireFraming: "Wireframes prioritized easy navigation for drivers and passengers, with quick booking flows and prominent tracking features.",
    wireFramingImage: "https://images.unsplash.com/photo-1581291518857-4e27b48ff24e?w=600&h=400&fit=crop",
    storyMapping: "Focused on must-have features: authentication, ride booking, driver-passenger tracking, and in-app communication. Loyalty features were mapped for future iterations.",
    storyMappingImage: "https://images.unsplash.com/photo-1552664730-d307ca884978?w=600&h=300&fit=crop",
    development: "Built the app with Flutter widgets for shared UI across Android and iOS. Firebase handled authentication and data synchronization, while Google Maps SDK enabled location tracking.",
    developmentImage: "https://images.unsplash.com/photo-1558494949-ef010cbdcc31?w=600&h=300&fit=crop",
    architecture: "Used Firebase as the backend (auth + real-time DB), Google Maps API for tracking, and a modular Flutter architecture for cross-platform deployment.",
    architectureImage: "https://images.unsplash.com/photo-1605902711622-cfb43c4437b5?w=600&h=400&fit=crop",
    testing: "Conducted real-world testing with multiple drivers and passengers, stress-tested database synchronization, and validated geolocation accuracy.",
    testingImage: "https://images.unsplash.com/photo-1581091870627-3b4f5b5972d8?w=600&h=400&fit=crop",
    deployment: "Deployed to both Google Play and App Store, with rollout phases and monitoring of performance and feedback.",
    deploymentImage: "https://images.unsplash.com/photo-1504384308090-c894fdcc538d?w=600&h=400&fit=crop"
  },
  {
    slug: "kingsmart-ventures",
    name: "KingSmart Ventures",
    type: "Mobile App",
    description: "A logistics platform enabling smooth and efficient user experiences for deliveries and transportation.",
    image: "https://images.unsplash.com/photo-1670544243301-bec324df773c?q=80&w=1929&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
    logo: "/projects/rubilog.png",
    details: "Contributed to the Rubi Logistics mobile app by building reusable components, integrating core functionalities, and ensuring seamless frontend-backend communication.",
    technologies: ["React Native", "TypeScript"],
    tag: "Featured",
    links: [],
    quote: "Rubi Logistics transformed how users experienced end-to-end delivery solutions.",
    quoteCite: "Project Manager",
    challenges: "Building scalable logistics features that handle high demand and ensure data consistency across systems.",
    challengesImage: "https://images.unsplash.com/photo-1551434678-e076c223a692?w=600&h=400&fit=crop",
    solutions: "Developed reusable code components, integrated backend APIs efficiently, and implemented a modular structure for easy scaling.",
    solutionsImage: "https://images.unsplash.com/photo-1460925895917-afdab827c52f?w=600&h=400&fit=crop",
    userFlow: "Users place logistics requests, which are routed to available drivers. Requests and progress are tracked live in the app with notifications sent for status updates.",
    userFlowImage: "https://images.unsplash.com/photo-1559136555-9303baea8ebd?w=600&h=300&fit=crop",
    wireFraming: "Designed dispatcher-friendly and customer-friendly flows with priority given to order creation and tracking.",
    wireFramingImage: "https://images.unsplash.com/photo-1581291518857-4e27b48ff24e?w=600&h=400&fit=crop",
    storyMapping: "Mapped features into essential flows (order booking, driver assignment, live tracking) and secondary features (analytics, delivery history).",
    storyMappingImage: "https://images.unsplash.com/photo-1552664730-d307ca884978?w=600&h=300&fit=crop",
    development: "Built with React Native + TypeScript, ensuring code modularity and reusability, and integrated backend APIs for live updates.",
    developmentImage: "https://images.unsplash.com/photo-1558494949-ef010cbdcc31?w=600&h=300&fit=crop",
    architecture: "React Native frontend with modular TypeScript components, backend communication via REST APIs, and Firebase for push notifications.",
    architectureImage: "https://images.unsplash.com/photo-1605902711622-cfb43c4437b5?w=600&h=400&fit=crop",
    testing: "Simulated multiple delivery requests, validated real-time updates, and stress-tested the notification system.",
    testingImage: "https://images.unsplash.com/photo-1581091870627-3b4f5b5972d8?w=600&h=400&fit=crop",
    deployment: "Released in phases with monitoring for order tracking accuracy and API performance.",
    deploymentImage: "https://images.unsplash.com/photo-1504384308090-c894fdcc538d?w=600&h=400&fit=crop"
  },
  {
    slug: "kara-shopping",
    name: "Kara Shopping",
    type: "Mobile App",
    description: "A cross-platform marketplace app for buying and selling local food items, complete with integrated logistics features.",
    image: "https://images.unsplash.com/photo-1556742400-1c4f9c9f6ef2?w=800&h=450&fit=crop",
    logo: "/projects/kara.png",
    details: "Built a complete end-to-end marketplace for food vendors and buyers. The platform supports transactions, logistics, and delivery partnerships.",
    technologies: ["React Native", "TypeScript", "Node.js"],
    tag: "Marketplace",
    links: [],
    quote: "Kara Shopping empowered local food businesses to thrive in the digital economy.",
    quoteCite: "Lead Developer",
    challenges: "Designing a scalable multi-vendor marketplace with integrated logistics while ensuring smooth UX.",
    challengesImage: "https://images.unsplash.com/photo-1551434678-e076c223a692?w=600&h=400&fit=crop",
    solutions: "Implemented vendor registration, product listings, buyer cart system, and delivery partner onboarding with streamlined flows.",
    solutionsImage: "https://images.unsplash.com/photo-1460925895917-afdab827c52f?w=600&h=400&fit=crop",
    userFlow: "Users browse products, add to cart, pay, and choose delivery or pickup. Vendors manage inventory while delivery partners accept logistics jobs.",
    userFlowImage: "https://images.unsplash.com/photo-1559136555-9303baea8ebd?w=600&h=300&fit=crop",
    wireFraming: "Focused on intuitive browsing for buyers, quick upload for vendors, and clear dashboards for delivery partners.",
    wireFramingImage: "https://images.unsplash.com/photo-1581291518857-4e27b48ff24e?w=600&h=400&fit=crop",
    storyMapping: "Prioritized MVP features: product browsing, purchase, delivery assignment. Future roadmap included vendor analytics and promos.",
    storyMappingImage: "https://images.unsplash.com/photo-1552664730-d307ca884978?w=600&h=300&fit=crop",
    development: "Built cross-platform with React Native, backend APIs powered by Node.js, and TypeScript for type safety.",
    developmentImage: "https://images.unsplash.com/photo-1558494949-ef010cbdcc31?w=600&h=300&fit=crop",
    architecture: "Frontend in React Native, backend in Node.js + PostgreSQL, with modular microservices for vendors, buyers, and logistics.",
    architectureImage: "https://images.unsplash.com/photo-1605902711622-cfb43c4437b5?w=600&h=400&fit=crop",
    testing: "Conducted usability testing with local vendors and simulated large transaction volumes to validate performance.",
    testingImage: "https://images.unsplash.com/photo-1581091870627-3b4f5b5972d8?w=600&h=400&fit=crop",
    deployment: "Rolled out regionally with vendor onboarding workshops and phased delivery partner integration.",
    deploymentImage: "https://images.unsplash.com/photo-1504384308090-c894fdcc538d?w=600&h=400&fit=crop"
  },
  {
    slug: "koyakaiya",
    name: "Koyakaiya",
    type: "Web App",
    description: "A modernized web application for managing and enhancing Koyakaiya’s online platform. A translation app designed to deliver cross-platform compatibility and a seamless multilingual experience.",
    image: "https://images.unsplash.com/photo-1504691342899-8d2d2d7ed8f0?w=800&h=450&fit=crop",
    logo: "/kki.png",
    details: "Applied expertise in React.js and TypeScript to enhance the Koyakaiya codebase, implementing improvements for reliability and functionality. Developed a translation application using React Native and TypeScript with a robust backend in Node.js and PostgreSQL.",
    technologies: ["React.js", "TypeScript", "TailwindCSS", "React Native", "Node.js", "Express", "PostgreSQL"],
    tag: "Web",
    links: [],
    quote: "Koyakaiya’s & Makks bridged language gaps through a reliable and intuitive translation platform.",
    quoteCite: "Software Engineer",
    challenges: "Building accurate translation workflows with real-time performance while ensuring offline functionality.",
    challengesImage: "https://images.unsplash.com/photo-1551434678-e076c223a692?w=600&h=400&fit=crop",
    solutions: "Designed modular APIs for translation services, integrated offline caching, and optimized backend queries.",
    solutionsImage: "https://images.unsplash.com/photo-1460925895917-afdab827c52f?w=600&h=400&fit=crop",
    userFlow: "Users input text or speech, the app processes translations in real-time or offline, and results are displayed instantly.",
    userFlowImage: "https://images.unsplash.com/photo-1559136555-9303baea8ebd?w=600&h=300&fit=crop",
    wireFraming: "Outlined simple UI for input/output while focusing on fast access to translation history.",
    wireFramingImage: "https://images.unsplash.com/photo-1581291518857-4e27b48ff24e?w=600&h=400&fit=crop",
    storyMapping: "Prioritized translation accuracy and speed in MVP before expanding into speech-to-text and offline dictionaries.",
    storyMappingImage: "https://images.unsplash.com/photo-1552664730-d307ca884978?w=600&h=300&fit=crop",
    development: "React Native frontend with TypeScript, Node.js backend APIs, and PostgreSQL for structured data.",
    developmentImage: "https://images.unsplash.com/photo-1558494949-ef010cbdcc31?w=600&h=300&fit=crop",
    architecture: "React Native client app + Node.js/Express backend, PostgreSQL DB, modular service-based design.",
    architectureImage: "https://images.unsplash.com/photo-1605902711622-cfb43c4437b5?w=600&h=400&fit=crop",
    testing: "Conducted accuracy tests, real-time translation benchmarks, and offline mode validation.",
    testingImage: "https://images.unsplash.com/photo-1581091870627-3b4f5b5972d8?w=600&h=400&fit=crop",
    deployment: "Published app to Google Play and App Store, monitored translation performance and user adoption.",
    deploymentImage: "https://images.unsplash.com/photo-1504384308090-c894fdcc538d?w=600&h=400&fit=crop"
  },
];